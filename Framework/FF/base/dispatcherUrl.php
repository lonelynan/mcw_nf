<?php
namespace base{ const VAR_MODULE = 'm'; const VAR_CONTROLLER = 'c'; const VAR_ACTION = 'a'; const VAR_ADDON = 'addon'; class dispatcherUrl { public static function parseUrl() { if (isset($_SERVER['PATH_INFO'])) { $pathinfo = explode('/', trim($_SERVER['PATH_INFO'], '/')); $_GET[VAR_MODULE] = (!empty($pathinfo[0]) ? self::safe_filter($pathinfo[0]) : 'shop'); array_shift($pathinfo); $_GET[VAR_CONTROLLER] = (!empty($pathinfo[0]) ? self::safe_filter($pathinfo[0]) : 'index'); array_shift($pathinfo); $_GET[VAR_ACTION] = (!empty($pathinfo[0]) ? self::safe_filter($pathinfo[0]) : 'index'); array_shift($pathinfo); for($i = 0; $i < count($pathinfo); $i += 2) { $_GET[$pathinfo[$i]] = self::safe_filter($pathinfo[$i+1]); } }else { $_GET[VAR_MODULE] = (!empty($_GET[VAR_MODULE]) ? self::safe_filter($_GET[VAR_MODULE]) : 'shop'); $_GET[VAR_CONTROLLER] = (!empty($_GET[VAR_CONTROLLER]) ? self::safe_filter($_GET[VAR_CONTROLLER]) : 'index'); $_GET[VAR_ACTION] = (!empty($_GET[VAR_ACTION]) ? self::safe_filter($_GET[VAR_ACTION]) : 'index'); } } public static function safe_filter($value) { $value = strip_tags($value); if(preg_match('/^(EXP|NEQ|GT|EGT|LT|ELT|OR|XOR|LIKE|NOTLIKE|NOT BETWEEN|NOTBETWEEN|BETWEEN|NOTIN|NOT IN|IN)$/i', $value)) { $value .= ' '; } return $value; } public static function dispatch() { if(defined('APP_SUB_DOMAIN_DEPLOY') and APP_SUB_DOMAIN_DEPLOY) { defined('APP_SUB_DOMAIN_RULES') or define('APP_SUB_DOMAIN_RULES', array()); $rules = APP_SUB_DOMAIN_RULES; if(isset($rules[$_SERVER['HTTP_HOST']])) { $rule = $rules[$_SERVER['HTTP_HOST']]; } if(!empty($rule)) { if(strpos($rule, '/') === false) { $array = array($rule); }else { $array = explode('/', $rule); } define('BIND_MODULE', array_shift($array)); if(!empty($array)) { $controller = array_shift($array); if($controller) { define('BIND_CONTROLLER', $controller); } } } } if(!preg_match('/^[A-Za-z](\/|\w)*$/', self::getController())) { $controller = false; }else { $class = ( self::getSpace() ? APP_PATH.'\\'.self::getSpace() : self::getModule() ).'\\controller'; $array = explode('/', self::getController()); foreach($array as $name){ $class .= '\\'.$name; } $class .= 'Controller'; if(class_exists($class)) { $controller = new $class(); }else { $controller = false; } } $action = self::getAction() . 'Op'; try { $method = new \ReflectionMethod($controller, $action); if($method->isPublic() && !$method->isStatic()) { $class = new \ReflectionClass($controller); if($class->hasMethod('_before_'.$action)) { $before = $class->getMethod('_before_'.$action); if($before->isPublic()) { $before->invoke($controller); } } $method->invoke($controller); if($class->hasMethod('_after_'.$action)) { $after = $class->getMethod('_after_' . $action); if($after->isPublic()) { $after->invoke($controller); } } }else { throw new \ReflectionException(); } }catch (\ReflectionException $e) { $method = new \ReflectionMethod($controller, '__call'); $method->invokeArgs($controller, array($action, '')); } return ; } public static function getSpace() { $space = !empty($_GET[VAR_ADDON]) ? strip_tags(strtolower($_GET[VAR_ADDON])) : ''; return $space; } public static function getModule() { $module = defined('BIND_MODULE') ? BIND_MODULE : $_GET[VAR_MODULE]; return strtolower($module); } public static function getController() { $controller = defined('BIND_CONTROLLER') ? BIND_CONTROLLER : $_GET[VAR_CONTROLLER]; return strtolower($controller); } public static function getAction() { $action = defined('BIND_CONTROLLER') ? BIND_CONTROLLER : $_GET[VAR_ACTION]; return strtolower($action); } public static function autoload($class) { if(false !== strpos($class, '\\')) { $name = explode('\\', $class)[0]; if(in_array($name, array('base','caching','safe','helpers','captcha','vendor')) || is_dir(FRAMEWORK_PATH . '/' . $name)){ $path = FRAMEWORK_PATH; }else { $namespace = array( 'common'=>APP_PATH . '/common', 'shop'=>APP_PATH . '/modules/shop', 'member'=>APP_PATH . '/modules/member', 'biz'=>APP_PATH . '/modules/biz', 'dis'=>APP_PATH . '/modules/dis', 'admin'=>APP_PATH . '/modules/admin', 'other'=>APP_PATH . '/modules/other'); $path = dirname($namespace[$name]); } if (ucwords(substr($class, -10)) == 'Controller') { $filename = $path . '/' . str_replace('\\', '/', substr($class, 0, -10)) . '.php'; }else{ $filename = $path . '/' . str_replace('\\', '/', $class) . '.php'; } if(is_file($filename)) { include_once $filename; }else { throw new \Exception('file error: '.$filename.' is not exists!'); } } } }}